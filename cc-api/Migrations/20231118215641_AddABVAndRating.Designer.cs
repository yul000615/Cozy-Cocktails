// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cc_api.DAL;

#nullable disable

namespace cc_api.Migrations
{
    [DbContext(typeof(CozyCocktailsContext))]
    [Migration("20231118215641_AddABVAndRating")]
    partial class AddABVAndRating
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("cc_api.Models.Ingredient", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<double>("AlcoholByVolume")
                        .HasColumnType("REAL")
                        .HasColumnName("alcohol_by_volume");

                    b.HasKey("Name");

                    b.ToTable("Ingredient", (string)null);
                });

            modelBuilder.Entity("cc_api.Models.Recipe", b =>
                {
                    b.Property<long>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("recipe_id");

                    b.Property<double>("ABV")
                        .HasColumnType("REAL");

                    b.Property<double>("AverageRating")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<long>("UserAuthor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_author");

                    b.HasKey("RecipeId");

                    b.HasIndex("UserAuthor");

                    b.ToTable("Recipe", (string)null);
                });

            modelBuilder.Entity("cc_api.Models.RecipeIngredient", b =>
                {
                    b.Property<long>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("list_id");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ingredient_name");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL")
                        .HasColumnName("quantity");

                    b.Property<string>("QuantityDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("quantity_description");

                    b.Property<long>("RecipeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("recipe_id");

                    b.HasKey("ListId");

                    b.HasIndex("IngredientName");

                    b.HasIndex("RecipeId");

                    b.ToTable("Recipe_Ingredient", (string)null);
                });

            modelBuilder.Entity("cc_api.Models.RefreshToken", b =>
                {
                    b.Property<long>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("token_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("token");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("Refresh_Token", (string)null);
                });

            modelBuilder.Entity("cc_api.Models.Report", b =>
                {
                    b.Property<long>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("report_id");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("issue");

                    b.Property<long>("RecipeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("recipe_id");

                    b.HasKey("ReportId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("cc_api.Models.Review", b =>
                {
                    b.Property<long>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("review_id");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("date_time");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("feedback");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL")
                        .HasColumnName("rating");

                    b.Property<long>("RecipeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("recipe_id");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("cc_api.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<long>("Admin")
                        .HasColumnType("INTEGER")
                        .HasColumnName("admin");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Email" }, "IX_User_email")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("cc_api.Models.UserBarIngredient", b =>
                {
                    b.Property<long>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("list_id");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ingredient_name");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("ListId");

                    b.HasIndex("IngredientName");

                    b.HasIndex("UserId");

                    b.ToTable("User_Bar_Ingredient", (string)null);
                });

            modelBuilder.Entity("cc_api.Models.UserFavoriteRecipe", b =>
                {
                    b.Property<long>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("list_id");

                    b.Property<long>("RecipeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("recipe_id");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("ListId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Favorite_Recipe", (string)null);
                });

            modelBuilder.Entity("cc_api.Models.Recipe", b =>
                {
                    b.HasOne("cc_api.Models.User", "UserAuthorNavigation")
                        .WithMany("Recipes")
                        .HasForeignKey("UserAuthor")
                        .IsRequired();

                    b.Navigation("UserAuthorNavigation");
                });

            modelBuilder.Entity("cc_api.Models.RecipeIngredient", b =>
                {
                    b.HasOne("cc_api.Models.Ingredient", "IngredientNameNavigation")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientName")
                        .IsRequired();

                    b.HasOne("cc_api.Models.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .IsRequired();

                    b.Navigation("IngredientNameNavigation");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("cc_api.Models.RefreshToken", b =>
                {
                    b.HasOne("cc_api.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("cc_api.Models.Report", b =>
                {
                    b.HasOne("cc_api.Models.Recipe", "Recipe")
                        .WithMany("Reports")
                        .HasForeignKey("RecipeId")
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("cc_api.Models.Review", b =>
                {
                    b.HasOne("cc_api.Models.Recipe", "Recipe")
                        .WithMany("Reviews")
                        .HasForeignKey("RecipeId")
                        .IsRequired();

                    b.HasOne("cc_api.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cc_api.Models.UserBarIngredient", b =>
                {
                    b.HasOne("cc_api.Models.Ingredient", "IngredientNameNavigation")
                        .WithMany("UserBarIngredients")
                        .HasForeignKey("IngredientName")
                        .IsRequired();

                    b.HasOne("cc_api.Models.User", "User")
                        .WithMany("UserBarIngredients")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("IngredientNameNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cc_api.Models.UserFavoriteRecipe", b =>
                {
                    b.HasOne("cc_api.Models.Recipe", "Recipe")
                        .WithMany("UserFavoriteRecipes")
                        .HasForeignKey("RecipeId")
                        .IsRequired();

                    b.HasOne("cc_api.Models.User", "User")
                        .WithMany("UserFavoriteRecipes")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cc_api.Models.Ingredient", b =>
                {
                    b.Navigation("RecipeIngredients");

                    b.Navigation("UserBarIngredients");
                });

            modelBuilder.Entity("cc_api.Models.Recipe", b =>
                {
                    b.Navigation("RecipeIngredients");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");

                    b.Navigation("UserFavoriteRecipes");
                });

            modelBuilder.Entity("cc_api.Models.User", b =>
                {
                    b.Navigation("Recipes");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Reviews");

                    b.Navigation("UserBarIngredients");

                    b.Navigation("UserFavoriteRecipes");
                });
#pragma warning restore 612, 618
        }
    }
}
